# ----------------------------------------------------------------------------------------------------------------------
import os
import numpy as np
import pandas as pd
import plotly.graph_objects as go
from sklearn.model_selection import train_test_split
from pre_processing import get_train_val_test_sets
# ----------------------------------------------------------------------------------------------------------------------

SAVE_PATH = "class_balanced_csvs_apks"
# ----------------------------------------------------------------------------------------------------------------------

# Function that plots the class distribution histograms
def get_class_distribution_hist(dataset, train_set, val_set, test_set, save=False):

    # Changing to 80% of data to training set and 20% to test (no validation)
    # Combine training set with validation set = 80% of data
    new_train_set = {"features": np.vstack([train_set["features"], val_set["features"]]),
                     "labels": np.hstack([train_set["labels"], val_set["labels"]])}

    # Counts the occurrences of each class
    _, dataset_counts = np.unique(dataset["Label"].values, return_counts=True)
    _, train_counts = np.unique(new_train_set["labels"], return_counts=True)
    _, test_counts = np.unique(test_set["labels"], return_counts=True)

    # Build the plot
    fig = go.Figure()
    fig.add_trace(go.Histogram(histfunc="count", x=dataset["Label"], name="Conjunto de Dados",
                               text=dataset_counts))

    fig.add_trace(go.Histogram(histfunc="count", x=new_train_set["labels"], name="Conjunto de Treinamento",
                               text=train_counts))

    # fig.add_trace(go.Histogram(histfunc="count", x=val_set["labels"], name="Conjunto de Validação",
    #                            text=val_counts))

    fig.add_trace(go.Histogram(histfunc="count", x=test_set["labels"], name="Conjunto de Teste",
                               text=test_counts))

    # Plot the histograms in alphabetical order
    fig.update_xaxes(categoryorder="category ascending")

    # Define the title and axes labels
    fig.update_layout(title_text="Histograma de Distribuição das Classes de Malwares", xaxis_title_text="Classes",
                      yaxis_title_text="Quantidade de Exemplos")

    fig.show()
# ----------------------------------------------------------------------------------------------------------------------

if __name__ == "__main__":

    # Read the dataset
    path = os.path.join(SAVE_PATH, "dataset.csv")
    dataset = pd.read_csv(path)

    # Split the data into train, validation and test
    train_set, val_set, test_set = get_train_val_test_sets(dataset)

    # Plot the class distribution for dataset, training set, validation set and test set
    get_class_distribution_hist(dataset, train_set, val_set, test_set)
# ----------------------------------------------------------------------------------------------------------------------