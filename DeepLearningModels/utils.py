from sklearn import preprocessing
import socket, struct
import pandas as pd

standartRegex = 'ID|Subclass'
# Max|Min|Mean|Std|Variance|Flags|
def openPDCsv(file_path):
    df = pd.read_csv(file_path)
    return df

def ip2int(ip):
    packedIP = socket.inet_aton(ip)
    return struct.unpack("!L", packedIP)[0]
    

def removePDDuplicates(df):
    df = df.T.drop_duplicates().T
    return df  
    
def dropPDColumns(df, regex):
    df = df.loc[:,~df.columns.str.contains(regex, case=False)] 
    return df

def econdePDcolumn(df, column_name):
    le = preprocessing.LabelEncoder()
    df[column_name] = le.fit_transform(df[column_name])
    return df

def savePDCsv(df, outputFilePath):
    test = df.to_csv(outputFilePath, index=False, header=True, sep = ',')
    if test is None:
        return True
    else:
        return False
    
def minMaxScalerPD(df):  
    data = df.values
    cols = df.columns
    
    min_max_scaler = preprocessing.MinMaxScaler()
    scaled_data = min_max_scaler.fit_transform(data)
    df = pd.DataFrame(scaled_data, columns=cols)
    return df    


if __name__ == "__main__":
    df = openPDCsv('dataset2.csv')
    print("Total columns:", len(df.columns))
    
    df['Dst IP'] = df['Dst IP'].apply(ip2int)
    df['Src IP'] = df['Src IP'].apply(ip2int)
    print("Converted IP to INT")
    
    df['Timestamp'] = pd.to_datetime(df['Timestamp']).values.astype(float)
    print('Converted Date to float')
    
    df = removePDDuplicates(df)
    print("After removing duplicates:", len(df.columns))
    
    df = dropPDColumns(df, standartRegex)
    df = econdePDcolumn(df, 'Label')
    print("Post-processing columns size:", len(df.columns))
    
    labels = df['Label']
    Input = df.drop('Label', axis=1)
    
    
    input_cols = Input.columns[1:].values
    
    Input = minMaxScalerPD(Input)
    
    savePDCsv(Input, 'input.csv')
    savePDCsv(labels, 'Label.csv')










